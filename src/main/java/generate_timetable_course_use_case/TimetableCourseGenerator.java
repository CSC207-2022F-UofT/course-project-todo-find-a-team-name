package generate_timetable_course_use_case;

import entities.CalendarCourse;
import entities.Section;
import entities.TimetableCourse;

import java.util.ArrayList;
import java.util.List;

/**
 * Class that generates all possible timetable courses from the given calendar course
 * It can also accept list of lectures, tutorials, practicals separately from the calendar course
 * to generate timetable courses based on these sections only (but other attributes like course code is
 * given by the calendar course)
 */
public class TimetableCourseGenerator {

    private CalendarCourse calenderCourse;

    /**
     * Constructs a TimetableCourseGenerator given calendar course, which is used
     * to generate all possible timetable courses
     *
     * @param calenderCourse calender course used to generate all possible timetable courses
     */
    public TimetableCourseGenerator(CalendarCourse calenderCourse){
        this.calenderCourse = calenderCourse;
    }


    /**
     * Returns list of all possible TimetableCourse corresponding to calenderCourse that can be generated by the
     * sections of calenderCourse
     *
     * @return list of all possible TimetableCourse corresponding to calenderCourse that can be generated by the
     * sections of calenderCourse
     */
    public List<TimetableCourse> generateAllTimetableCourse(){
        List<Section> lectures = new ArrayList<>();
        List<Section> tutorials = new ArrayList<>();
        List<Section> practicals = new ArrayList<>();
        for (Section section : calenderCourse.getSections()){

            if (section.isLecture()){
                lectures.add(section);
            }
            else if (section.isTutorial()){
                tutorials.add(section);
            }
            else if (section.isPractical()){
                practicals.add(section);
            }
        }

        return generateAllTimetableCourses(lectures, tutorials, practicals);
    }

    /**
     * Returns list of all possible TimetableCourse corresponding to the calenderCourse
     * that can be generated from the given lectures, tutorials, and practicals
     *
     * @param lectures all lectures in course
     * @param tutorials all tutorials in course
     * @param practicals all practicals in course
     * @return list of all possible TimetableCourse corresponding to the given course
     * that can be generated from the given lectures, tutorials, and practicals
     */
    public List<TimetableCourse> generateAllTimetableCourses(List<Section> lectures, List<Section> tutorials, List<Section> practicals) {
        List<List<Section>> sections = new ArrayList<>();
        sections.add(lectures);
        sections.add(tutorials);
        sections.add(practicals);
        try {
            ArrayList<TimetableCourse> result = new ArrayList<>();
            generateAllTimetableCourses(sections, result, 0, new TimetableCourse(calenderCourse.getTitle(),
                    new ArrayList<>(), calenderCourse.getCourseSession(),
                    calenderCourse.getCourseCode(), calenderCourse.getBreadth()));
            return result;
        } catch (Exception e) {
            throw new RuntimeException(e);
        }

    }

    /**
     * Adds all possible timetable courses to result that can be created by adding sections contained in sections
     * from index, depth to sections.size()-1, to curr
     *
     * @param sections sections to be added to curr
     * @param result result that stores timetable courses
     * @param depth current index for list of sections
     * @param curr current timetable course used to make copy
     */
    private static void generateAllTimetableCourses(List<List<Section>> sections, List<TimetableCourse> result,
                                            int depth, TimetableCourse curr){
        if (depth == sections.size()){
            result.add(curr);
            return;
        }

        if (sections.get(depth).size() == 0)
            generateAllTimetableCourses(sections, result, depth + 1, curr);

        for (Section section : sections.get(depth)) {
            TimetableCourse course;
            try {
                course = new TimetableCourse(curr.getTitle(), new ArrayList<>(curr.getSections()), curr.getCourseSession(),
                        curr.getCourseCode(), curr.getBreadth());
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
            course.setSection(section);
            generateAllTimetableCourses(sections, result, depth + 1, course);
        }
    }

    /**
     * Returns calenderCourse of this generator
     *
     * @return calenderCourse of this generator
     */
    public CalendarCourse getCalenderCourse() {
        return calenderCourse;
    }

    /**
     * Sets calendarCourse to the given calendar course
     *
     * @param calenderCourse new calendar course of this generator
     */
    public void setCalenderCourse(CalendarCourse calenderCourse) {
        this.calenderCourse = calenderCourse;
    }
}
